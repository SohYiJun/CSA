.model small
.stack 100
.data
    price dw 30             ; Fixed price per item
    quantity db ?           ; User input for quantity
    total dw ?              ; Total price
    sst dw ?                ; SST (Sales and Service Tax)
    grandTotal dw ?         ; Grand Total

    inputMsg db "Enter quantity of ticket (1-9): $"
    invalidMsg db "Invalid quantity. Please enter a number between 1 and 9.$"
    resultMsg1 db "Total price = $"
    resultMsg2 db "SST = $"
    resultMsg3 db "Grand total = $"
    newline db 10, 13, '$'

.code
main proc
    mov ax, @data
    mov ds, ax

    mov ah, 09h             ; Print input message
    lea dx, inputMsg
    int 21h

    ; Input quantity
    mov ah, 01h
    int 21h
    sub al, '0'             ; Convert ASCII to numeric value
    cmp al, 1               ; Check if quantity is at least 1
    jl invalidQuantity
    cmp al, 9               ; Check if quantity is at most 9
    jg invalidQuantity

    ; Calculate total price
    mov bl, al              ; Quantity in BL
    mov ax, price           ; Price in AX
    mul bx                  ; AX = price * quantity
    mov total, ax

    ; Calculate SST (5% of total)
    mov ax, total
    mov bx, 5
    mul bx
    mov dx, 0               ; Clear DX for division
    mov bx, 100             ; Divisor = 100
    div bx                  ; AX = total * 0.05
    mov sst, ax

    ; Calculate Grand Total
    mov ax, total
    add ax, sst
    mov grandTotal, ax

    ; Display results
    mov ah, 09h             ; Print result messages
    lea dx, resultMsg1
    int 21h

    mov ax, total           ; Display Total
    call printValue

    mov ah, 09h             ; Print new line
    lea dx, newline
    int 21h

    lea dx, resultMsg2
    int 21h

    mov ax, sst             ; Display SST
    call printValue

    mov ah, 09h             ; Print new line
    lea dx, newline
    int 21h

    lea dx, resultMsg3
    int 21h

    mov ax, grandTotal      ; Display Grand Total
    call printValue

    jmp exit

invalidQuantity:
    mov ah, 09h             ; Print invalid message
    lea dx, invalidMsg
    int 21h

exit:
    mov ah, 4Ch             ; Exit program
    int 21h

printValue:
    push ax
    mov cx, 0
    mov bx, 10

    nextDigit:
        xor dx, dx          ; Clear DX for division
        div bx              ; Divide AX by 10, result in AX, remainder in DX
        push dx             ; Push the remainder onto the stack
        inc cx              ; Increment digit count
        test ax, ax         ; Check if quotient is zero
        jnz nextDigit

    printDigits:
        pop dx              ; Pop a digit from the stack
        add dl, '0'         ; Convert digit to ASCII
        mov ah, 02h         ; DOS function to print character
        int 21h
        loop printDigits

    pop ax
    ret

main endp
end main
